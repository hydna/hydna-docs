Introduction
============

The Hydna Protocol is a TCP/IP-based, application layer procotol designed
to facilitate high performance one-to-many real time communication. It is
an asynchronous protocol, albeit a few internal operations rely on
chat-style communication.

It is a very terse, multicasting, binary protocol that is well-suited for
rapidly sending large amounts of small packets.

Terminology
-----------

* When you encounter the term *byte* we mean an *octet* (8 bits). Both
  terms may be used interchangeably throughtout this document.

* When you encounter the term *nibble* we mean half an *octet* (4 bits).

* A _nulled_ entity means an entity in which all bits have been set to `0`
  (the entity has zero magnitude).

* In long sequences of bits (such as addresses) we often omit bits for
  reasons of brevity. This is indicated by a trailing ellipsis (...).

* Packing two nibbles in a byte::
  byte = OP_CODE << 4 | FLAG

* Unpacking a byte into two nibbles::
  (OP_CODE, FLAG) = (byte >> 4, byte & 0b1111)

The Anatomy of a Hydna Packet
=============================

Each Hydna Packet consists of a header and a payload (the content).

  +--------------+-----------+------------+------------+------------+
  | TOTAL LENGTH | RESERVED  |   ADDRESS  |  OP CODE   |    FLAG    |
  |  (2 octets)  | (1 octet) | (4 octets) | (1 nibble) | (1 nibble) |
  +--------------+-----------+------------+------------+------------+
  |                           CONTENT SPACE                         |
  |                        (0 - 10 240 octets)                      |
  +-----------------------------------------------------------------+

Header
------

NOTE: All date is assumed to be in *big endian* form.

The header describes the packet's destination and how the content should be
interpreted when introspected. The header spans 8 octets in total
(`TOTAL LENGTH(2) + RESERVED(1) DESTINATION(4) + OP CODE(0.5) + FLAG(0.5)`).

Header Fields
~~~~~~~~~~~~~

* `TOTAL LENGTH` - The total size of the packet (including the header
  itself) in octets (`HEADER + CONTENT SPACE`).

* `RESERVED` - Reserved for future use.

* `OP CODE` - A code describing how the packet should be interpreted. See
  "Op Codes" below.

* `FLAG` - An op code specific flag that is used to send special directives
  related to said op code (priorities for example).

Address Space
~~~~~~~~~~~~~

An address consists of 4 octets. The `ADDRESS SPACE` should be "nulled" if it
is not required by an operation.

Content Space / Payload
~~~~~~~~~~~~~~~~~~~~~~~

The content is the actual content being transmitted with the packet,
starting at an offset of 8 (the header size) octets.

The content size is determined by subtracting the header size from the
total size declared in the first field of the header
(`TOTAL LENGTH - HEADER LENGTH`). The maximum size of the content
transmitted is soft-capped at 10240 bytes; packets with a `TOTAL LENGTH`
field indicating a message larger than `HEADER LENGTH + 10240` will be
automatically dropped.

Communication
=============

Handshake
---------

A small handshake must take place before communication over the protocal can
be commenced.

The handshake is initialized by the client by sending a packet in the format:

  +--------------+-----------+-----------+
  |    PREFIX    |   LENGTH  |   HOST    |
  |  (4 octets)  | (1 octet) | (4 octet) |
  +--------------+-----------+-----------+

Where `PREFIX` is a 4-octet-prefix corresponding to the text "DNA1" in the
ASCII table, `LENGTH` dictates the length of the `HOST` wich is an ASCII 
sequence.

Example request:
    
    0x444E4131 0x0A hello.com
     ^          ^    ^
     |          |    +- HOST FQDN of host
     |          |       
     |          +- LENGTH (1 octets) 10 characters
     |
     +- PREFIX

The server will, in turn, respond with a packet in the format:

  +--------------+-----------+
  |    PREFIX    |   CODE    |
  |  (4 octets)  | (1 octet) |
  +--------------+-----------+

The prefix should match the one sent by the client. `CODE` is one of the
following:

  CODE TERM        MEANING
  ==== ====        =======
  0x00 SUCCESS     Success
  0x01 UNKNOWN     Unknown Error
  0x02 SERVER_BUSY Server Busy
  0x03 BAD_FORMAT  Bad Format
  0x04 ZONE        Invalid Zone

Example response:

  0x444E4131 0x00
   ^          ^      
   |          +- CODE (1 octet) Indicates a successful handshake
   |
   +- PREFIX


Regular Communication
---------------------

There are three op codes in use in the current implementation (`OPEN`, `DATA`
and `SIGNAL`). The same op codes are used in both directions, but are treated
differently depending on if they are received or sent.

Op codes (OP CODE) sent by clients
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  SIGNAL OP CODE ACCEPTED FLAGS OCTET REPR
  ====== ======= ============== ==========
  OPEN   0x1     0x0-0x7        0x10-0x17
  DATA   0x2     0x1-0x3        0x20-0x22
  SIGNAL 0x3     0x0-0x1        0x30-0x31

Note: clients may never send nulled addresses to the server. Doing so will
result in the connection being closed.

OPEN (0x1)
^^^^^^^^^^

Attempts to open a connection to a stream in a specific `mode`.
The `CONTENT SPACE` can be used to attach a `token` to the open request.

The flag-nibble is used to determine the mode in which to open the stream:

  FLAG TERM   MEANING
  ==== ====== =======
  0x0  LISTEN Stream will receive signals
  0x1  READ   Stream will receive data
  0x2  WRITE  Stream should be writable
  0x4  EMIT   Can send signals

Flags can be combined by means of addition resulting in the following
additional flags that carry multiple values:

  FLAG MEANING
  ==== =======
  0x3  LISTEN, READ, WRITE (0x0 + 0x1 + 0x2)
  0x5  LISTEN, READ, EMIT (0x0 + 0x1 + 0x4)
  0x6  LISTEN, WRITE, EMIT (0x0 + 0x2 + 0x4)
  0x7  LISTEN, READ, WRITE, EMIT (0x0 + 0x1 + 0x2 + 0x4)

Example:

  HEADER: 0x0008 0x0000 0x00112233 0x1 0x1
           ^      ^      ^          ^   ^   
           |      |      |          |   |
           |      |      |          |   +- FLAG: 0x1, READ
           |      |      |          |
           |      |      |          +- OP CODE 0x1, OPEN
           |      |      |
           |      |      +- ADDRESS (8 octets) Address of stream to open
           |      |     
           |      +- RESERVED (unused in example)
           |
           +- TOTAL LENGTH: 8 octets
  
  CONTENT SPACE: An optional token (empty in example)


DATA (0x2)
^^^^^^^^^^^

Send the payload in `CONTENT SPACE` to `ADDRESS`. The flag-bit indicates
priority of the message.

Valid priority levels: 0x1, 0x2, 0x3

  HEADER: 0x0020 0x0000 0x00112233 0x1 0x1
           ^      ^      ^          ^   ^   
           |      |      |          |   |
           |      |      |          |   +- FLAG: 0x1, Priority 1
           |      |      |          |
           |      |      |          +- OP CODE 0x2, DATA
           |      |      |
           |      |      +- ADDRESS (8 octets) Address of stream to send to
           |      |     
           |      +- RESERVED (unused in example)
           |
           +- TOTAL LENGTH: 20 octets

  CONTENT SPACE: Data to send ("Hello World!" in example)

SIGNAL (0x3)
^^^^^^^^^^^^

Send a signal to the specified `ADDRESS`. All signals are identified by their
code sent in the flab-nibble. Clients can send signals in the range 0x00-0x01.

   FLAG TERM   MEANING
   ==== ====== =======
   0x0  EMIT   Emit a custom signal
 * 0x1  END    Close stream

When the server receives a signal with the `END`-flag, the stream will be
closed and must be re-opened before further actions can be performed.

Additional information can be sent in the payload.

  HEADER: 0x0020 0x0000 0x00112233 0x3 0x1
           ^      ^      ^          ^   ^   
           |      |      |          |   |
           |      |      |          |   +- FLAG: 0x1 Custom signal
           |      |      |          |
           |      |      |          +- OP CODE 0x3, SIGNAL
           |      |      |
           |      |      +- ADDRESS (8 octets) Address of stream to send to
           |      |     
           |      +- RESERVED (unused in example)
           |
           +- TOTAL LENGTH: 8 octets

  CONTENT SPACE: Data to accompany signal ("Hello World!" in example)

Op codes (OP CODE) received by clients
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SIGNAL    OP CODE ACCEPTED FLAGS
======    ======= ==============
OPEN      0x1     0x0-0x7       
DATA      0x2     0x0-0x2       
SIGNAL    0x3     0x0-0xF       

OPEN  (0x1)
^^^^^^^^^^^

An `OPEN`-request by the client is always followed by an `OPEN`-response
from the server. The packet contains the address opened in `ADDRESS`, the
type of response in the `FLAG` and the final address of the stream from which
packets will be received in the `CONTENT SPACE`.

A client might send a request to open the address '00112233'. The server might
respond with the address '11223344' in the `CONTENT SPACE`. The latter is the
actual address the client should be listening for packets on.

This behaviour is useful when the administrator needs to assign addresses
to clients that do not know what address they should request (think DHCP or
DNS lookup).

    FLAG TERM              MEANING
    ==== ============      =======
    0x0  SUCCESS           The open request was successful.
    0x1  REDIRECT          Redirected to a new address, new address in payload.
    0x2  *unused*
    0x3  *unused*
    0x4  *unused*
    0x5  *unused*
    0x6  *unused*
    0x6  *unused*
  * 0x8  FAIL_NA           Stream is not available
  * 0x9  FAIL_MODE         Mode not allowed
  * 0xa  FAIL_PROTOCOL     Protocol not allowed
  * 0xb  FAIL_HOST         Hostname not allowed
  * 0xc  FAIL_AUTH         Authentication failure
  * 0xd  FAIL_SERVICE_NA   Service not available
  * 0xe  FAIL_SERVICE_ERR  Service error
  * 0xf  FAIL_OTHER        Other error

Responses marked with an asterisk (*) denote that the stream was NOT opened.

  HEADER: 0x0012 0x00 0x00112233 0x1 0x0
           ^      ^    ^          ^   ^   
           |      |    |          |   |
           |      |    |          |   +- FLAG: 0x0 SUCCESS
           |      |    |          |
           |      |    |          +- OP CODE 0x1, OPEN
           |      |    |
           |      |    +- ADDRESS (4 octets) Address as was sent in the
           |      |       open request
           |      |   
           |      +- RESERVED (1 octet, unused in example)
           |
           +- TOTAL LENGTH: 12 octets

  CONTENT SPACE: Null, actual address (4 octets) in redredicts or error messages


DATA (0x2)
^^^^^^^^^^

Data received (see `DATA` in the section `Op codes sent by clients`).

  HEADER: 0x0020 0x00 0x00112233 0x3 0x3
           ^      ^    ^          ^   ^   
           |      |    |          |   |
           |      |    |          |   +- FLAG: 0x3, Priority
           |      |    |          |
           |      |    |          +- OP CODE 0x03, DATA
           |      |    |
           |      |    +- ADDRESS (8 octets) Address of stream that data was
           |      |       sent to.
           |      |   
           |      +- RESERVED (1 octet, unused in example)
           |
           +- TOTAL LENGTH: 20 octets

  CONTENT SPACE: Data that was sent ("Hello World!" in example)


SIGNAL (0x3)
^^^^^^^^^^^^

Signal received (see `SIGNAL` in the section `Op codes sent by clients`).

The following flags can be sent by the server:

    FLAG TERM           MEANING
    ==== ======         =======
    0x0  EMIT           Emit a custom signal
  * 0x1  END            Close stream
    0x5  N/A            *unused*
    0x6  N/A            *unused*
    0x7  N/A            *unused*
    0x8  N/A            *unused*
    0x9  N/A            *unused*
  * 0xA  ERR_PROTOCOL   Client sent ill-formatted data
  * 0xB  ERR_OPERATION  Operation Error
  * 0xC  ERR_LIMIT      Limit reached (messages/second, message size etc)
  * 0xD  ERR_SERVER     Internal server error
  * 0xE  ERR_VIOLATION  A violation has occurred
  * 0xF  ERR_OTHER      Other error

When a flag marked with an asterisk (*) in the table above is received, the
target stream will be closed.

If the address of the packet is nulled, all streams on the target zone will be
affected by the signal.

  HEADER: 0x0020 0x00 0x00112233 0x3 0x1
           ^      ^    ^          ^   ^   
           |      |    |          |   |
           |      |    |          |   +- FLAG: 0x1 Custom signal
           |      |    |          |
           |      |    |          +- OP CODE 0x03, SIGNAL
           |      |    |
           |      |    +- ADDRESS (8 octets) Address of stream to close
           |      |   
           |      +- RESERVED (unused in example)
           |
           +- TOTAL LENGTH: 20 octets
