                      Wink Messaging Protocol
                      -----------------------

Wink Messaging Protocol is dived into two sub categories, transport layer
and Wink Message Frame. The transport layer works as a Message container.

The transport protocol MUST deliver data in whole messages. The Wink transport
layer is a subset of the TCP Protocol.

It is also possible to use the WebSocket protocol as a transport layer. This
specification does not contain any details about the WebSocket protocol.



2. Handshaking

Handshakes is requested over HTTP or HTTPS. The upgrade header sets which
transport layer to use. A typical handshake looks as follows:

  GET / HTTP/1.1
  Connection: upgrade
  Upgrade: winksock/1

Response from server:

  HTTP/1.1 Switching Protocol
  Upgrade: winsock/1


2.1. Handshake URI


[http://][<auth>@] <host> [ : <port> ] [ / <channel> ] [ ? <token> ]

Host:
	Fully qualified domain name of remote entity serving intended zone. The host
	must not exeed 256 bytes.

Port:
	Port on which remote server is accepting connections. Defaults to port 80.

Channel:
	Id of the channel specified in base-10 (must be < 4294967295). If the id
	is prefixed with an `x`, the channel should be interpreted as base-16 (must be
	< FFFFFFFF). Defaults to channel 1.

Token:
	Token that should be sent to the server along with an open-request. Default to
	empty string.


Examples:

livetorget.hydna.net/13145
\__________________/ \___/
       |               |
      host            addr

sweet.hydna.net/13145?password
\_____________/ \___/ \______/
       |          |      |
      host       addr  token

beans.hydna.net:8080/13145?password
\_____________/ \__/ \___/ \_____/
       |         |     |      |
      host      port  addr  token




3.1 Transport Layers


3.1 Wink Transport Layer

The Wink Transport Layer delivers packets in full size. 


3.1.1. Message Container

The Wink Transport Layer header is simple. It contains an UNSIGNED WORD
(2 bytes).


                  0                   1             
                  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 
                  +--------------------------------+
                  |            Message Size        |
                  +--------------------------------+


(Text saknas)




4. Wink Message Frame protocol

The Wink Message Frame protocol is a way of opening and closing channels...

(Text saknas)


4.1 Message Frame specification  


       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +---------------------------------------------------------------+
      |                         Channel ID                            |
      +-+-+-+---+------+----------------------------------------------+
      |R|R|R| O | flag |                                              |
      |S|S|S| P |  (3) |              Payload Data                    |
      |V|V|V|(2)|      |    (Length is defined by transport layer)    |
      |1|2|3|   |      |                                              |
      +-+-+-+---+------+ - - - - - - - - - - - - - - - - - - - - - - -+
      :                     Payload Data continued ...                :
      + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
      |                     Payload Data continued ...                |
      +---------------------------------------------------------------+


RSV1:  1 bit
  Is reserved for the the underlying transport layer
  
RSV2:  1 bit
  Is reserved for the the underlying transport layer  
  
RSV3:  1 bit
  Is reserved for the the underlying transport layer

OP:  2 bit
  Defines the type of the payload data.

  - 0x0 denotes a NOOP frame, see opcodes section for more details.
  - 0x1 denotes a OPEN frame, see opcodes section for more details.
  - 0x2 denotes a DATA frame, see opcodes section for more details.
  - 0x3 denotes a SIGNAL frame, see opcodes section for more details.
  
  
FLAG:  3 bit
  Defines an opcode flag. The flags has different meanings
  for different op-codes. See opcodes section for more details


4.2. Op-codes

Opcodes can differ between server and client.


4.2.1. NOOP - 0x0 (both server and client)

Flags:

    0x0-0x7:  Do nothing, both client and server SHOULD simply ignore
              the message.


4.2.3. OPEN - 0x1 (client)

Flags:

    0x0: Open channel in LISTEN mode
    0x1: Open Channel in READ-only mode
    0x2: Open channel in WRITE-only mode
    0x4: Open channel in EMIT mode

Flags can be combined by means of addition resulting in the following
additional flags that carry multiple values:

  FLAG MEANING
  ==== =======
  0x3  LISTEN, READ, WRITE (0x0 + 0x1 + 0x2)
  0x5  LISTEN, READ, EMIT (0x0 + 0x1 + 0x4)
  0x6  LISTEN, WRITE, EMIT (0x0 + 0x2 + 0x4)
  0x7  LISTEN, READ, WRITE, EMIT (0x0 + 0x1 + 0x2 + 0x4)


4.2.4. OPEN - 0x1 (server)


Flags:

    0x0: ALLOW, the channel open request was allowed, channel is open.
    0x1: REDIRECT, the channel open request was allowed, but was 
         redirected to an other channel. New channel in `payload`.
    0x2-0x6: Currently unused. Channel was not opened. Client SHOULD
         respond with a NOT_ALLOWED error.
    0x7: DENY, the channel open request was denied. See reason in
         payload.



4.2.5. DATA - 0x2 (both server and client)

Data frame. Contains either Raw binary data or UTF8 data.

Flags:

    0x0: Binary-Frame with priority 1 (highest)
    0x1: UTF8-Frame with priority 1(highest)
    0x2: Binary-Frame with priority 1
    0x3: UTF8-Frame with priority 1
    0x4: Binary-Frame with priority 2
    0x5: UTF8-Frame with priority 2
    0x6: Binary-Frame with priority 4 (lowest)
    0x7: UTF8-Frame with priority 4 (lowest)



4.2.6. SIGNAL - 0x3 (both server and client)

Payload of SIGNAL frames IS ALWAYS of data type UTF-8

    0x0:      Not used, will terminated connection
    0x1:      Emit 
    0x2:      End
    0x3-0x6:  Currently unused, SHOULD BE ignored by both parts.
    0x7:      Error (ends specified channel with error)
